// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Turso
{
    /// <summary>
    /// Database Token resource
    /// </summary>
    [TursoResourceType("turso:index/databaseToken:DatabaseToken")]
    public partial class DatabaseToken : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Authorization level for the token (full-access or read-only).
        /// </summary>
        [Output("authorization")]
        public Output<string?> Authorization { get; private set; } = null!;

        /// <summary>
        /// The name of the database.
        /// </summary>
        [Output("databaseName")]
        public Output<string> DatabaseName { get; private set; } = null!;

        /// <summary>
        /// Expiration time for the token (e.g., 2w1d30m).
        /// </summary>
        [Output("expiration")]
        public Output<string?> Expiration { get; private set; } = null!;

        /// <summary>
        /// The generated authorization token (JWT).
        /// </summary>
        [Output("jwt")]
        public Output<string> Jwt { get; private set; } = null!;

        /// <summary>
        /// The name of the organization or user.
        /// </summary>
        [Output("organizationName")]
        public Output<string> OrganizationName { get; private set; } = null!;


        /// <summary>
        /// Create a DatabaseToken resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DatabaseToken(string name, DatabaseTokenArgs args, CustomResourceOptions? options = null)
            : base("turso:index/databaseToken:DatabaseToken", name, args ?? new DatabaseTokenArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DatabaseToken(string name, Input<string> id, DatabaseTokenState? state = null, CustomResourceOptions? options = null)
            : base("turso:index/databaseToken:DatabaseToken", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "jwt",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DatabaseToken resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DatabaseToken Get(string name, Input<string> id, DatabaseTokenState? state = null, CustomResourceOptions? options = null)
        {
            return new DatabaseToken(name, id, state, options);
        }
    }

    public sealed class DatabaseTokenArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Authorization level for the token (full-access or read-only).
        /// </summary>
        [Input("authorization")]
        public Input<string>? Authorization { get; set; }

        /// <summary>
        /// The name of the database.
        /// </summary>
        [Input("databaseName", required: true)]
        public Input<string> DatabaseName { get; set; } = null!;

        /// <summary>
        /// Expiration time for the token (e.g., 2w1d30m).
        /// </summary>
        [Input("expiration")]
        public Input<string>? Expiration { get; set; }

        /// <summary>
        /// The name of the organization or user.
        /// </summary>
        [Input("organizationName", required: true)]
        public Input<string> OrganizationName { get; set; } = null!;

        public DatabaseTokenArgs()
        {
        }
        public static new DatabaseTokenArgs Empty => new DatabaseTokenArgs();
    }

    public sealed class DatabaseTokenState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Authorization level for the token (full-access or read-only).
        /// </summary>
        [Input("authorization")]
        public Input<string>? Authorization { get; set; }

        /// <summary>
        /// The name of the database.
        /// </summary>
        [Input("databaseName")]
        public Input<string>? DatabaseName { get; set; }

        /// <summary>
        /// Expiration time for the token (e.g., 2w1d30m).
        /// </summary>
        [Input("expiration")]
        public Input<string>? Expiration { get; set; }

        [Input("jwt")]
        private Input<string>? _jwt;

        /// <summary>
        /// The generated authorization token (JWT).
        /// </summary>
        public Input<string>? Jwt
        {
            get => _jwt;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _jwt = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The name of the organization or user.
        /// </summary>
        [Input("organizationName")]
        public Input<string>? OrganizationName { get; set; }

        public DatabaseTokenState()
        {
        }
        public static new DatabaseTokenState Empty => new DatabaseTokenState();
    }
}
