// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Turso
{
    public static class GetDatabase
    {
        /// <summary>
        /// Database data source
        /// </summary>
        public static Task<GetDatabaseResult> InvokeAsync(GetDatabaseArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDatabaseResult>("turso:index/getDatabase:getDatabase", args ?? new GetDatabaseArgs(), options.WithDefaults());

        /// <summary>
        /// Database data source
        /// </summary>
        public static Output<GetDatabaseResult> Invoke(GetDatabaseInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDatabaseResult>("turso:index/getDatabase:getDatabase", args ?? new GetDatabaseInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDatabaseArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the group where the database should be created. The group must already exist.
        /// </summary>
        [Input("group")]
        public string? Group { get; set; }

        /// <summary>
        /// Mark this database as the parent schema database that updates child databases with any schema changes.
        /// </summary>
        [Input("isSchema")]
        public bool? IsSchema { get; set; }

        /// <summary>
        /// The name of the new database. Must contain only lowercase letters, numbers, dashes. No longer than 32 characters.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Name of organization to create the database for
        /// </summary>
        [Input("organizationName", required: true)]
        public string OrganizationName { get; set; } = null!;

        /// <summary>
        /// The name of the parent database to use as the schema.
        /// </summary>
        [Input("schema")]
        public string? Schema { get; set; }

        /// <summary>
        /// The maximum size of the database in bytes. Values with units are also accepted, e.g. 1mb, 256mb, 1gb.
        /// </summary>
        [Input("sizeLimit")]
        public string? SizeLimit { get; set; }

        public GetDatabaseArgs()
        {
        }
        public static new GetDatabaseArgs Empty => new GetDatabaseArgs();
    }

    public sealed class GetDatabaseInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the group where the database should be created. The group must already exist.
        /// </summary>
        [Input("group")]
        public Input<string>? Group { get; set; }

        /// <summary>
        /// Mark this database as the parent schema database that updates child databases with any schema changes.
        /// </summary>
        [Input("isSchema")]
        public Input<bool>? IsSchema { get; set; }

        /// <summary>
        /// The name of the new database. Must contain only lowercase letters, numbers, dashes. No longer than 32 characters.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Name of organization to create the database for
        /// </summary>
        [Input("organizationName", required: true)]
        public Input<string> OrganizationName { get; set; } = null!;

        /// <summary>
        /// The name of the parent database to use as the schema.
        /// </summary>
        [Input("schema")]
        public Input<string>? Schema { get; set; }

        /// <summary>
        /// The maximum size of the database in bytes. Values with units are also accepted, e.g. 1mb, 256mb, 1gb.
        /// </summary>
        [Input("sizeLimit")]
        public Input<string>? SizeLimit { get; set; }

        public GetDatabaseInvokeArgs()
        {
        }
        public static new GetDatabaseInvokeArgs Empty => new GetDatabaseInvokeArgs();
    }


    [OutputType]
    public sealed class GetDatabaseResult
    {
        /// <summary>
        /// The database universal unique identifier (UUID).
        /// </summary>
        public readonly string DbId;
        /// <summary>
        /// The name of the group where the database should be created. The group must already exist.
        /// </summary>
        public readonly string? Group;
        /// <summary>
        /// The DNS hostname used for client libSQL and HTTP connections.
        /// </summary>
        public readonly string Hostname;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Mark this database as the parent schema database that updates child databases with any schema changes.
        /// </summary>
        public readonly bool? IsSchema;
        /// <summary>
        /// The name of the new database. Must contain only lowercase letters, numbers, dashes. No longer than 32 characters.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Name of organization to create the database for
        /// </summary>
        public readonly string OrganizationName;
        /// <summary>
        /// The name of the parent database to use as the schema.
        /// </summary>
        public readonly string? Schema;
        /// <summary>
        /// The maximum size of the database in bytes. Values with units are also accepted, e.g. 1mb, 256mb, 1gb.
        /// </summary>
        public readonly string? SizeLimit;

        [OutputConstructor]
        private GetDatabaseResult(
            string dbId,

            string? group,

            string hostname,

            string id,

            bool? isSchema,

            string name,

            string organizationName,

            string? schema,

            string? sizeLimit)
        {
            DbId = dbId;
            Group = group;
            Hostname = hostname;
            Id = id;
            IsSchema = isSchema;
            Name = name;
            OrganizationName = organizationName;
            Schema = schema;
            SizeLimit = sizeLimit;
        }
    }
}
