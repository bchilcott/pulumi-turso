// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package turso

import (
	"context"
	"reflect"

	"github.com/bchilcott/pulumi-turso/sdk/go/turso/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Database data source
func LookupDatabase(ctx *pulumi.Context, args *LookupDatabaseArgs, opts ...pulumi.InvokeOption) (*LookupDatabaseResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDatabaseResult
	err := ctx.Invoke("turso:index/getDatabase:getDatabase", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDatabase.
type LookupDatabaseArgs struct {
	// The name of the group where the database should be created. The group must already exist.
	Group *string `pulumi:"group"`
	// Mark this database as the parent schema database that updates child databases with any schema changes.
	IsSchema *bool `pulumi:"isSchema"`
	// The name of the new database. Must contain only lowercase letters, numbers, dashes. No longer than 32 characters.
	Name string `pulumi:"name"`
	// Name of organization to create the database for
	OrganizationName string `pulumi:"organizationName"`
	// The name of the parent database to use as the schema.
	Schema *string `pulumi:"schema"`
	// The maximum size of the database in bytes. Values with units are also accepted, e.g. 1mb, 256mb, 1gb.
	SizeLimit *string `pulumi:"sizeLimit"`
}

// A collection of values returned by getDatabase.
type LookupDatabaseResult struct {
	// The database universal unique identifier (UUID).
	DbId string `pulumi:"dbId"`
	// The name of the group where the database should be created. The group must already exist.
	Group *string `pulumi:"group"`
	// The DNS hostname used for client libSQL and HTTP connections.
	Hostname string `pulumi:"hostname"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Mark this database as the parent schema database that updates child databases with any schema changes.
	IsSchema *bool `pulumi:"isSchema"`
	// The name of the new database. Must contain only lowercase letters, numbers, dashes. No longer than 32 characters.
	Name string `pulumi:"name"`
	// Name of organization to create the database for
	OrganizationName string `pulumi:"organizationName"`
	// The name of the parent database to use as the schema.
	Schema *string `pulumi:"schema"`
	// The maximum size of the database in bytes. Values with units are also accepted, e.g. 1mb, 256mb, 1gb.
	SizeLimit *string `pulumi:"sizeLimit"`
}

func LookupDatabaseOutput(ctx *pulumi.Context, args LookupDatabaseOutputArgs, opts ...pulumi.InvokeOption) LookupDatabaseResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDatabaseResult, error) {
			args := v.(LookupDatabaseArgs)
			r, err := LookupDatabase(ctx, &args, opts...)
			var s LookupDatabaseResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupDatabaseResultOutput)
}

// A collection of arguments for invoking getDatabase.
type LookupDatabaseOutputArgs struct {
	// The name of the group where the database should be created. The group must already exist.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// Mark this database as the parent schema database that updates child databases with any schema changes.
	IsSchema pulumi.BoolPtrInput `pulumi:"isSchema"`
	// The name of the new database. Must contain only lowercase letters, numbers, dashes. No longer than 32 characters.
	Name pulumi.StringInput `pulumi:"name"`
	// Name of organization to create the database for
	OrganizationName pulumi.StringInput `pulumi:"organizationName"`
	// The name of the parent database to use as the schema.
	Schema pulumi.StringPtrInput `pulumi:"schema"`
	// The maximum size of the database in bytes. Values with units are also accepted, e.g. 1mb, 256mb, 1gb.
	SizeLimit pulumi.StringPtrInput `pulumi:"sizeLimit"`
}

func (LookupDatabaseOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDatabaseArgs)(nil)).Elem()
}

// A collection of values returned by getDatabase.
type LookupDatabaseResultOutput struct{ *pulumi.OutputState }

func (LookupDatabaseResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDatabaseResult)(nil)).Elem()
}

func (o LookupDatabaseResultOutput) ToLookupDatabaseResultOutput() LookupDatabaseResultOutput {
	return o
}

func (o LookupDatabaseResultOutput) ToLookupDatabaseResultOutputWithContext(ctx context.Context) LookupDatabaseResultOutput {
	return o
}

// The database universal unique identifier (UUID).
func (o LookupDatabaseResultOutput) DbId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseResult) string { return v.DbId }).(pulumi.StringOutput)
}

// The name of the group where the database should be created. The group must already exist.
func (o LookupDatabaseResultOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDatabaseResult) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// The DNS hostname used for client libSQL and HTTP connections.
func (o LookupDatabaseResultOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseResult) string { return v.Hostname }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupDatabaseResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseResult) string { return v.Id }).(pulumi.StringOutput)
}

// Mark this database as the parent schema database that updates child databases with any schema changes.
func (o LookupDatabaseResultOutput) IsSchema() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupDatabaseResult) *bool { return v.IsSchema }).(pulumi.BoolPtrOutput)
}

// The name of the new database. Must contain only lowercase letters, numbers, dashes. No longer than 32 characters.
func (o LookupDatabaseResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseResult) string { return v.Name }).(pulumi.StringOutput)
}

// Name of organization to create the database for
func (o LookupDatabaseResultOutput) OrganizationName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseResult) string { return v.OrganizationName }).(pulumi.StringOutput)
}

// The name of the parent database to use as the schema.
func (o LookupDatabaseResultOutput) Schema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDatabaseResult) *string { return v.Schema }).(pulumi.StringPtrOutput)
}

// The maximum size of the database in bytes. Values with units are also accepted, e.g. 1mb, 256mb, 1gb.
func (o LookupDatabaseResultOutput) SizeLimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDatabaseResult) *string { return v.SizeLimit }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDatabaseResultOutput{})
}
