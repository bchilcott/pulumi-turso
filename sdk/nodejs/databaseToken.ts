// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Database Token resource
 */
export class DatabaseToken extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseToken resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseTokenState, opts?: pulumi.CustomResourceOptions): DatabaseToken {
        return new DatabaseToken(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'turso:index/databaseToken:DatabaseToken';

    /**
     * Returns true if the given object is an instance of DatabaseToken.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabaseToken {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabaseToken.__pulumiType;
    }

    /**
     * Authorization level for the token (full-access or read-only).
     */
    public readonly authorization!: pulumi.Output<string | undefined>;
    /**
     * The name of the database.
     */
    public readonly databaseName!: pulumi.Output<string>;
    /**
     * Expiration time for the token (e.g., 2w1d30m).
     */
    public readonly expiration!: pulumi.Output<string | undefined>;
    /**
     * The generated authorization token (JWT).
     */
    public /*out*/ readonly jwt!: pulumi.Output<string>;
    /**
     * The name of the organization or user.
     */
    public readonly organizationName!: pulumi.Output<string>;

    /**
     * Create a DatabaseToken resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseTokenArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabaseTokenArgs | DatabaseTokenState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabaseTokenState | undefined;
            resourceInputs["authorization"] = state ? state.authorization : undefined;
            resourceInputs["databaseName"] = state ? state.databaseName : undefined;
            resourceInputs["expiration"] = state ? state.expiration : undefined;
            resourceInputs["jwt"] = state ? state.jwt : undefined;
            resourceInputs["organizationName"] = state ? state.organizationName : undefined;
        } else {
            const args = argsOrState as DatabaseTokenArgs | undefined;
            if ((!args || args.databaseName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseName'");
            }
            if ((!args || args.organizationName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organizationName'");
            }
            resourceInputs["authorization"] = args ? args.authorization : undefined;
            resourceInputs["databaseName"] = args ? args.databaseName : undefined;
            resourceInputs["expiration"] = args ? args.expiration : undefined;
            resourceInputs["organizationName"] = args ? args.organizationName : undefined;
            resourceInputs["jwt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["jwt"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(DatabaseToken.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DatabaseToken resources.
 */
export interface DatabaseTokenState {
    /**
     * Authorization level for the token (full-access or read-only).
     */
    authorization?: pulumi.Input<string>;
    /**
     * The name of the database.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * Expiration time for the token (e.g., 2w1d30m).
     */
    expiration?: pulumi.Input<string>;
    /**
     * The generated authorization token (JWT).
     */
    jwt?: pulumi.Input<string>;
    /**
     * The name of the organization or user.
     */
    organizationName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DatabaseToken resource.
 */
export interface DatabaseTokenArgs {
    /**
     * Authorization level for the token (full-access or read-only).
     */
    authorization?: pulumi.Input<string>;
    /**
     * The name of the database.
     */
    databaseName: pulumi.Input<string>;
    /**
     * Expiration time for the token (e.g., 2w1d30m).
     */
    expiration?: pulumi.Input<string>;
    /**
     * The name of the organization or user.
     */
    organizationName: pulumi.Input<string>;
}
