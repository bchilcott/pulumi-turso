// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Database resource
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as turso from "@pulumi/turso";
 *
 * const example = new turso.Database("example", {
 *     group: "a-group",
 *     organizationName: "an-organization",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import turso:index/database:Database example_database organization_name/database_name
 * ```
 */
export class Database extends pulumi.CustomResource {
    /**
     * Get an existing Database resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseState, opts?: pulumi.CustomResourceOptions): Database {
        return new Database(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'turso:index/database:Database';

    /**
     * Returns true if the given object is an instance of Database.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Database {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Database.__pulumiType;
    }

    /**
     * The database universal unique identifier (UUID).
     */
    public /*out*/ readonly dbId!: pulumi.Output<string>;
    /**
     * The name of the group where the database should be created. The group must already exist.
     */
    public readonly group!: pulumi.Output<string>;
    /**
     * The DNS hostname used for client libSQL and HTTP connections.
     */
    public /*out*/ readonly hostname!: pulumi.Output<string>;
    /**
     * Mark this database as the parent schema database that updates child databases with any schema changes.
     */
    public readonly isSchema!: pulumi.Output<boolean | undefined>;
    /**
     * The name of the new database. Must contain only lowercase letters, numbers, dashes. No longer than 32 characters.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Name of organization to create the database for
     */
    public readonly organizationName!: pulumi.Output<string>;
    /**
     * The name of the parent database to use as the schema.
     */
    public readonly schema!: pulumi.Output<string | undefined>;
    /**
     * The maximum size of the database in bytes. Values with units are also accepted, e.g. 1mb, 256mb, 1gb.
     */
    public readonly sizeLimit!: pulumi.Output<string | undefined>;

    /**
     * Create a Database resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabaseArgs | DatabaseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabaseState | undefined;
            resourceInputs["dbId"] = state ? state.dbId : undefined;
            resourceInputs["group"] = state ? state.group : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["isSchema"] = state ? state.isSchema : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["organizationName"] = state ? state.organizationName : undefined;
            resourceInputs["schema"] = state ? state.schema : undefined;
            resourceInputs["sizeLimit"] = state ? state.sizeLimit : undefined;
        } else {
            const args = argsOrState as DatabaseArgs | undefined;
            if ((!args || args.group === undefined) && !opts.urn) {
                throw new Error("Missing required property 'group'");
            }
            if ((!args || args.organizationName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organizationName'");
            }
            resourceInputs["group"] = args ? args.group : undefined;
            resourceInputs["isSchema"] = args ? args.isSchema : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["organizationName"] = args ? args.organizationName : undefined;
            resourceInputs["schema"] = args ? args.schema : undefined;
            resourceInputs["sizeLimit"] = args ? args.sizeLimit : undefined;
            resourceInputs["dbId"] = undefined /*out*/;
            resourceInputs["hostname"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Database.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Database resources.
 */
export interface DatabaseState {
    /**
     * The database universal unique identifier (UUID).
     */
    dbId?: pulumi.Input<string>;
    /**
     * The name of the group where the database should be created. The group must already exist.
     */
    group?: pulumi.Input<string>;
    /**
     * The DNS hostname used for client libSQL and HTTP connections.
     */
    hostname?: pulumi.Input<string>;
    /**
     * Mark this database as the parent schema database that updates child databases with any schema changes.
     */
    isSchema?: pulumi.Input<boolean>;
    /**
     * The name of the new database. Must contain only lowercase letters, numbers, dashes. No longer than 32 characters.
     */
    name?: pulumi.Input<string>;
    /**
     * Name of organization to create the database for
     */
    organizationName?: pulumi.Input<string>;
    /**
     * The name of the parent database to use as the schema.
     */
    schema?: pulumi.Input<string>;
    /**
     * The maximum size of the database in bytes. Values with units are also accepted, e.g. 1mb, 256mb, 1gb.
     */
    sizeLimit?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Database resource.
 */
export interface DatabaseArgs {
    /**
     * The name of the group where the database should be created. The group must already exist.
     */
    group: pulumi.Input<string>;
    /**
     * Mark this database as the parent schema database that updates child databases with any schema changes.
     */
    isSchema?: pulumi.Input<boolean>;
    /**
     * The name of the new database. Must contain only lowercase letters, numbers, dashes. No longer than 32 characters.
     */
    name?: pulumi.Input<string>;
    /**
     * Name of organization to create the database for
     */
    organizationName: pulumi.Input<string>;
    /**
     * The name of the parent database to use as the schema.
     */
    schema?: pulumi.Input<string>;
    /**
     * The maximum size of the database in bytes. Values with units are also accepted, e.g. 1mb, 256mb, 1gb.
     */
    sizeLimit?: pulumi.Input<string>;
}
