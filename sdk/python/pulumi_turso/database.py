# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['DatabaseArgs', 'Database']

@pulumi.input_type
class DatabaseArgs:
    def __init__(__self__, *,
                 group: pulumi.Input[str],
                 organization_name: pulumi.Input[str],
                 is_schema: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 schema: Optional[pulumi.Input[str]] = None,
                 size_limit: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Database resource.
        :param pulumi.Input[str] group: The name of the group where the database should be created. The group must already exist.
        :param pulumi.Input[str] organization_name: Name of organization to create the database for
        :param pulumi.Input[bool] is_schema: Mark this database as the parent schema database that updates child databases with any schema changes.
        :param pulumi.Input[str] name: The name of the new database. Must contain only lowercase letters, numbers, dashes. No longer than 32 characters.
        :param pulumi.Input[str] schema: The name of the parent database to use as the schema.
        :param pulumi.Input[str] size_limit: The maximum size of the database in bytes. Values with units are also accepted, e.g. 1mb, 256mb, 1gb.
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "organization_name", organization_name)
        if is_schema is not None:
            pulumi.set(__self__, "is_schema", is_schema)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)
        if size_limit is not None:
            pulumi.set(__self__, "size_limit", size_limit)

    @property
    @pulumi.getter
    def group(self) -> pulumi.Input[str]:
        """
        The name of the group where the database should be created. The group must already exist.
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: pulumi.Input[str]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> pulumi.Input[str]:
        """
        Name of organization to create the database for
        """
        return pulumi.get(self, "organization_name")

    @organization_name.setter
    def organization_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "organization_name", value)

    @property
    @pulumi.getter(name="isSchema")
    def is_schema(self) -> Optional[pulumi.Input[bool]]:
        """
        Mark this database as the parent schema database that updates child databases with any schema changes.
        """
        return pulumi.get(self, "is_schema")

    @is_schema.setter
    def is_schema(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_schema", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the new database. Must contain only lowercase letters, numbers, dashes. No longer than 32 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def schema(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the parent database to use as the schema.
        """
        return pulumi.get(self, "schema")

    @schema.setter
    def schema(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema", value)

    @property
    @pulumi.getter(name="sizeLimit")
    def size_limit(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum size of the database in bytes. Values with units are also accepted, e.g. 1mb, 256mb, 1gb.
        """
        return pulumi.get(self, "size_limit")

    @size_limit.setter
    def size_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size_limit", value)


@pulumi.input_type
class _DatabaseState:
    def __init__(__self__, *,
                 db_id: Optional[pulumi.Input[str]] = None,
                 group: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 is_schema: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization_name: Optional[pulumi.Input[str]] = None,
                 schema: Optional[pulumi.Input[str]] = None,
                 size_limit: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Database resources.
        :param pulumi.Input[str] db_id: The database universal unique identifier (UUID).
        :param pulumi.Input[str] group: The name of the group where the database should be created. The group must already exist.
        :param pulumi.Input[str] hostname: The DNS hostname used for client libSQL and HTTP connections.
        :param pulumi.Input[bool] is_schema: Mark this database as the parent schema database that updates child databases with any schema changes.
        :param pulumi.Input[str] name: The name of the new database. Must contain only lowercase letters, numbers, dashes. No longer than 32 characters.
        :param pulumi.Input[str] organization_name: Name of organization to create the database for
        :param pulumi.Input[str] schema: The name of the parent database to use as the schema.
        :param pulumi.Input[str] size_limit: The maximum size of the database in bytes. Values with units are also accepted, e.g. 1mb, 256mb, 1gb.
        """
        if db_id is not None:
            pulumi.set(__self__, "db_id", db_id)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if is_schema is not None:
            pulumi.set(__self__, "is_schema", is_schema)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organization_name is not None:
            pulumi.set(__self__, "organization_name", organization_name)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)
        if size_limit is not None:
            pulumi.set(__self__, "size_limit", size_limit)

    @property
    @pulumi.getter(name="dbId")
    def db_id(self) -> Optional[pulumi.Input[str]]:
        """
        The database universal unique identifier (UUID).
        """
        return pulumi.get(self, "db_id")

    @db_id.setter
    def db_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_id", value)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the group where the database should be created. The group must already exist.
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        """
        The DNS hostname used for client libSQL and HTTP connections.
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="isSchema")
    def is_schema(self) -> Optional[pulumi.Input[bool]]:
        """
        Mark this database as the parent schema database that updates child databases with any schema changes.
        """
        return pulumi.get(self, "is_schema")

    @is_schema.setter
    def is_schema(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_schema", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the new database. Must contain only lowercase letters, numbers, dashes. No longer than 32 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of organization to create the database for
        """
        return pulumi.get(self, "organization_name")

    @organization_name.setter
    def organization_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization_name", value)

    @property
    @pulumi.getter
    def schema(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the parent database to use as the schema.
        """
        return pulumi.get(self, "schema")

    @schema.setter
    def schema(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema", value)

    @property
    @pulumi.getter(name="sizeLimit")
    def size_limit(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum size of the database in bytes. Values with units are also accepted, e.g. 1mb, 256mb, 1gb.
        """
        return pulumi.get(self, "size_limit")

    @size_limit.setter
    def size_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size_limit", value)


class Database(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 group: Optional[pulumi.Input[str]] = None,
                 is_schema: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization_name: Optional[pulumi.Input[str]] = None,
                 schema: Optional[pulumi.Input[str]] = None,
                 size_limit: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Database resource

        ## Example Usage

        ```python
        import pulumi
        import pulumi_turso as turso

        example = turso.Database("example",
            group="a-group",
            organization_name="an-organization")
        ```

        ## Import

        ```sh
        $ pulumi import turso:index/database:Database example_database organization_name/database_name
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] group: The name of the group where the database should be created. The group must already exist.
        :param pulumi.Input[bool] is_schema: Mark this database as the parent schema database that updates child databases with any schema changes.
        :param pulumi.Input[str] name: The name of the new database. Must contain only lowercase letters, numbers, dashes. No longer than 32 characters.
        :param pulumi.Input[str] organization_name: Name of organization to create the database for
        :param pulumi.Input[str] schema: The name of the parent database to use as the schema.
        :param pulumi.Input[str] size_limit: The maximum size of the database in bytes. Values with units are also accepted, e.g. 1mb, 256mb, 1gb.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DatabaseArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Database resource

        ## Example Usage

        ```python
        import pulumi
        import pulumi_turso as turso

        example = turso.Database("example",
            group="a-group",
            organization_name="an-organization")
        ```

        ## Import

        ```sh
        $ pulumi import turso:index/database:Database example_database organization_name/database_name
        ```

        :param str resource_name: The name of the resource.
        :param DatabaseArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DatabaseArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 group: Optional[pulumi.Input[str]] = None,
                 is_schema: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization_name: Optional[pulumi.Input[str]] = None,
                 schema: Optional[pulumi.Input[str]] = None,
                 size_limit: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DatabaseArgs.__new__(DatabaseArgs)

            if group is None and not opts.urn:
                raise TypeError("Missing required property 'group'")
            __props__.__dict__["group"] = group
            __props__.__dict__["is_schema"] = is_schema
            __props__.__dict__["name"] = name
            if organization_name is None and not opts.urn:
                raise TypeError("Missing required property 'organization_name'")
            __props__.__dict__["organization_name"] = organization_name
            __props__.__dict__["schema"] = schema
            __props__.__dict__["size_limit"] = size_limit
            __props__.__dict__["db_id"] = None
            __props__.__dict__["hostname"] = None
        super(Database, __self__).__init__(
            'turso:index/database:Database',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            db_id: Optional[pulumi.Input[str]] = None,
            group: Optional[pulumi.Input[str]] = None,
            hostname: Optional[pulumi.Input[str]] = None,
            is_schema: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            organization_name: Optional[pulumi.Input[str]] = None,
            schema: Optional[pulumi.Input[str]] = None,
            size_limit: Optional[pulumi.Input[str]] = None) -> 'Database':
        """
        Get an existing Database resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] db_id: The database universal unique identifier (UUID).
        :param pulumi.Input[str] group: The name of the group where the database should be created. The group must already exist.
        :param pulumi.Input[str] hostname: The DNS hostname used for client libSQL and HTTP connections.
        :param pulumi.Input[bool] is_schema: Mark this database as the parent schema database that updates child databases with any schema changes.
        :param pulumi.Input[str] name: The name of the new database. Must contain only lowercase letters, numbers, dashes. No longer than 32 characters.
        :param pulumi.Input[str] organization_name: Name of organization to create the database for
        :param pulumi.Input[str] schema: The name of the parent database to use as the schema.
        :param pulumi.Input[str] size_limit: The maximum size of the database in bytes. Values with units are also accepted, e.g. 1mb, 256mb, 1gb.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DatabaseState.__new__(_DatabaseState)

        __props__.__dict__["db_id"] = db_id
        __props__.__dict__["group"] = group
        __props__.__dict__["hostname"] = hostname
        __props__.__dict__["is_schema"] = is_schema
        __props__.__dict__["name"] = name
        __props__.__dict__["organization_name"] = organization_name
        __props__.__dict__["schema"] = schema
        __props__.__dict__["size_limit"] = size_limit
        return Database(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="dbId")
    def db_id(self) -> pulumi.Output[str]:
        """
        The database universal unique identifier (UUID).
        """
        return pulumi.get(self, "db_id")

    @property
    @pulumi.getter
    def group(self) -> pulumi.Output[str]:
        """
        The name of the group where the database should be created. The group must already exist.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Output[str]:
        """
        The DNS hostname used for client libSQL and HTTP connections.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="isSchema")
    def is_schema(self) -> pulumi.Output[Optional[bool]]:
        """
        Mark this database as the parent schema database that updates child databases with any schema changes.
        """
        return pulumi.get(self, "is_schema")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the new database. Must contain only lowercase letters, numbers, dashes. No longer than 32 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> pulumi.Output[str]:
        """
        Name of organization to create the database for
        """
        return pulumi.get(self, "organization_name")

    @property
    @pulumi.getter
    def schema(self) -> pulumi.Output[Optional[str]]:
        """
        The name of the parent database to use as the schema.
        """
        return pulumi.get(self, "schema")

    @property
    @pulumi.getter(name="sizeLimit")
    def size_limit(self) -> pulumi.Output[Optional[str]]:
        """
        The maximum size of the database in bytes. Values with units are also accepted, e.g. 1mb, 256mb, 1gb.
        """
        return pulumi.get(self, "size_limit")

