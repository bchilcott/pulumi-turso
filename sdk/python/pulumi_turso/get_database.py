# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetDatabaseResult',
    'AwaitableGetDatabaseResult',
    'get_database',
    'get_database_output',
]

@pulumi.output_type
class GetDatabaseResult:
    """
    A collection of values returned by getDatabase.
    """
    def __init__(__self__, db_id=None, group=None, hostname=None, id=None, is_schema=None, name=None, organization_name=None, schema=None, size_limit=None):
        if db_id and not isinstance(db_id, str):
            raise TypeError("Expected argument 'db_id' to be a str")
        pulumi.set(__self__, "db_id", db_id)
        if group and not isinstance(group, str):
            raise TypeError("Expected argument 'group' to be a str")
        pulumi.set(__self__, "group", group)
        if hostname and not isinstance(hostname, str):
            raise TypeError("Expected argument 'hostname' to be a str")
        pulumi.set(__self__, "hostname", hostname)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_schema and not isinstance(is_schema, bool):
            raise TypeError("Expected argument 'is_schema' to be a bool")
        pulumi.set(__self__, "is_schema", is_schema)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if organization_name and not isinstance(organization_name, str):
            raise TypeError("Expected argument 'organization_name' to be a str")
        pulumi.set(__self__, "organization_name", organization_name)
        if schema and not isinstance(schema, str):
            raise TypeError("Expected argument 'schema' to be a str")
        pulumi.set(__self__, "schema", schema)
        if size_limit and not isinstance(size_limit, str):
            raise TypeError("Expected argument 'size_limit' to be a str")
        pulumi.set(__self__, "size_limit", size_limit)

    @property
    @pulumi.getter(name="dbId")
    def db_id(self) -> str:
        """
        The database universal unique identifier (UUID).
        """
        return pulumi.get(self, "db_id")

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The name of the group where the database should be created. The group must already exist.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        """
        The DNS hostname used for client libSQL and HTTP connections.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isSchema")
    def is_schema(self) -> Optional[bool]:
        """
        Mark this database as the parent schema database that updates child databases with any schema changes.
        """
        return pulumi.get(self, "is_schema")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the new database. Must contain only lowercase letters, numbers, dashes. No longer than 32 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> str:
        """
        Name of organization to create the database for
        """
        return pulumi.get(self, "organization_name")

    @property
    @pulumi.getter
    def schema(self) -> Optional[str]:
        """
        The name of the parent database to use as the schema.
        """
        return pulumi.get(self, "schema")

    @property
    @pulumi.getter(name="sizeLimit")
    def size_limit(self) -> Optional[str]:
        """
        The maximum size of the database in bytes. Values with units are also accepted, e.g. 1mb, 256mb, 1gb.
        """
        return pulumi.get(self, "size_limit")


class AwaitableGetDatabaseResult(GetDatabaseResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDatabaseResult(
            db_id=self.db_id,
            group=self.group,
            hostname=self.hostname,
            id=self.id,
            is_schema=self.is_schema,
            name=self.name,
            organization_name=self.organization_name,
            schema=self.schema,
            size_limit=self.size_limit)


def get_database(group: Optional[str] = None,
                 is_schema: Optional[bool] = None,
                 name: Optional[str] = None,
                 organization_name: Optional[str] = None,
                 schema: Optional[str] = None,
                 size_limit: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDatabaseResult:
    """
    Database data source


    :param str group: The name of the group where the database should be created. The group must already exist.
    :param bool is_schema: Mark this database as the parent schema database that updates child databases with any schema changes.
    :param str name: The name of the new database. Must contain only lowercase letters, numbers, dashes. No longer than 32 characters.
    :param str organization_name: Name of organization to create the database for
    :param str schema: The name of the parent database to use as the schema.
    :param str size_limit: The maximum size of the database in bytes. Values with units are also accepted, e.g. 1mb, 256mb, 1gb.
    """
    __args__ = dict()
    __args__['group'] = group
    __args__['isSchema'] = is_schema
    __args__['name'] = name
    __args__['organizationName'] = organization_name
    __args__['schema'] = schema
    __args__['sizeLimit'] = size_limit
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('turso:index/getDatabase:getDatabase', __args__, opts=opts, typ=GetDatabaseResult).value

    return AwaitableGetDatabaseResult(
        db_id=pulumi.get(__ret__, 'db_id'),
        group=pulumi.get(__ret__, 'group'),
        hostname=pulumi.get(__ret__, 'hostname'),
        id=pulumi.get(__ret__, 'id'),
        is_schema=pulumi.get(__ret__, 'is_schema'),
        name=pulumi.get(__ret__, 'name'),
        organization_name=pulumi.get(__ret__, 'organization_name'),
        schema=pulumi.get(__ret__, 'schema'),
        size_limit=pulumi.get(__ret__, 'size_limit'))


@_utilities.lift_output_func(get_database)
def get_database_output(group: Optional[pulumi.Input[Optional[str]]] = None,
                        is_schema: Optional[pulumi.Input[Optional[bool]]] = None,
                        name: Optional[pulumi.Input[str]] = None,
                        organization_name: Optional[pulumi.Input[str]] = None,
                        schema: Optional[pulumi.Input[Optional[str]]] = None,
                        size_limit: Optional[pulumi.Input[Optional[str]]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDatabaseResult]:
    """
    Database data source


    :param str group: The name of the group where the database should be created. The group must already exist.
    :param bool is_schema: Mark this database as the parent schema database that updates child databases with any schema changes.
    :param str name: The name of the new database. Must contain only lowercase letters, numbers, dashes. No longer than 32 characters.
    :param str organization_name: Name of organization to create the database for
    :param str schema: The name of the parent database to use as the schema.
    :param str size_limit: The maximum size of the database in bytes. Values with units are also accepted, e.g. 1mb, 256mb, 1gb.
    """
    ...
